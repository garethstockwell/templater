#!/usr/bin/env python

# {{PROJECT}l}

# This script is a skeleton, generated by a templating engine.
# Lines where changes to this template should be made are marked with comments
# starting [CHANGE]

#------------------------------------------------------------------------------
# Imports
#------------------------------------------------------------------------------

import argparse
import logging


#------------------------------------------------------------------------------
# Global constants
#------------------------------------------------------------------------------

LINE_WIDTH = 80


#------------------------------------------------------------------------------
# Classes
#------------------------------------------------------------------------------

class ArgumentParser(argparse.ArgumentParser):
    def __init__(self):
        description = '[CHANGE] A dummy description'
        epilog = '''
        [CHANGE] A dummy epilog string
        '''
        version = '[CHANGE] 0.1'

        argparse.ArgumentParser.__init__(self,
                                         description = description,
                                         epilog = epilog)

        # Options
        self.add_argument('--debug',
                          dest='debug', default=False,
                          action='store_true',
                          help='show debugging output')
        self.add_argument('-n', '--dry-run',
                          dest='dry_run', default=False,
                          action='store_true',
                          help='just show what would be done')
        self.add_argument('-v', '--verbose',
                          dest='verbose', default=False,
                          action='store_true',
                          help='produce verbose output')
        self.add_argument('-V', '--version',
                          dest='version',
                          action='version',
                          version=version,
                          help="show program's version number and exit")

        subparsers = self.add_subparsers(help='subcommands',
                                         parser_class=argparse.ArgumentParser)

        # Subcommand foo
        parser_foo = subparsers.add_parser('foo', help='[CHANGE] first subcommand')
        parser_foo.add_argument('x',
                                help='[CHANGE] first parameter')
        parser_foo.add_argument('y',
                                help='[CHANGE] second parameter')
        parser_foo.set_defaults(func=foo)

        # Subcommand bar
        parser_bar = subparsers.add_parser('bar', help='[CHANGE] second subcommand')
        parser_bar.set_defaults(func=bar)


#------------------------------------------------------------------------------
# Subcommand implementations
#------------------------------------------------------------------------------

def foo(args):
    print "Executing subcommand 'foo' ..."
    print 'x={0:s}, y={1:s}'.format(args.x, args.y)


def bar(args):
    print "Executing subcommand 'bar' ..."


#------------------------------------------------------------------------------
# Utility functions
#------------------------------------------------------------------------------

def print_error(message):
    print >> sys.stderr, 'Error:', message


def parse_command_line():
    '''
    Return: argparse.Namespace
    '''
    parser = ArgumentParser()
    return parser.parse_args()


def print_summary(args):
    '''
    Print results of parsing command line
    '''
    keys = [name for name in dir(args) if not name.startswith('_')]
    keys.remove('func')
    keys.append('subcommand')
    maxkeylen = max([len(key) for key in keys])
    keys.remove('subcommand')
    values = [len(str(getattr(args, key))) for key in keys]
    values.append(args.func.func_name)
    maxvaluelen = max([len(str(value)) for value in values])
    rightcolpos = LINE_WIDTH - maxvaluelen - 4
    print '-' * LINE_WIDTH
    print 'Summary of options'
    print '-' * LINE_WIDTH
    print ' subcommand', ('.' * (rightcolpos - len('subcommand') - 2)), args.func.func_name
    for key in sorted(list(set(keys))):
        print ' '+ key, ('.' * (rightcolpos - len(key) - 2)), getattr(args, key)
    print '-' * LINE_WIDTH
    print


#------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------

args = parse_command_line()

if args.verbose:
    print_summary(args)
if args.debug:
    logging.getLogger().setLevel(logging.DEBUG)

logging.debug('Testing testing 123')

args.func(args)

